// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String          @id @default(uuid())
  email           String          @unique
  name            String
  password        String
  phone           String          @unique
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  logins          Employee?       @relation("Employee")
}

model Employee {
  id              String         @id @default(uuid())
  user_id         String         @unique
  picture_profile String?     
  full_name       String
  place_of_birth  String?
  date_of_birth   DateTime?
  address         String?
  date_joined     DateTime?
  gender          String?
  position_id     Int
  location_id     Int?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  user            User           @relation(fields: [user_id], references: [id], name: "Employee")
  posisi          Position?       @relation(fields: [position_id ], references: [id], name: "Position")
  Location        Location?       @relation(fields: [location_id ], references: [id], name: "Location")
}

model Position {
  id                Int         @id @default(autoincrement())
  name              String      @unique
  access_menus      Int[]
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  employee          Employee[]  @relation("Position")
}

model Location {
  id                Int         @id @default(autoincrement())
  name              String      @unique
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  employee          Employee[]  @relation("Location")
}

model AccessMenu{
  id                Int            @id @default(autoincrement())
  url               String
  title             String
  icon              String
  children          Int?
  parent             AccessMenu?     @relation("accessMenu",fields: [children],references: [id])
  child            AccessMenu[]     @relation("accessMenu")
}